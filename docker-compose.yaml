version: "3"
services:
  kafka:
    image: docker.io/bitnami/kafka:latest
    hostname: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,EXTERNAL://kafka_b:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2

  web:
    image: "marquezproject/marquez-web:0.48.0"
    container_name: marquez-web
    environment:
      - MARQUEZ_HOST=api
      - MARQUEZ_PORT=5000
    ports:
      - 3000:3000
    links:
      - "api:marquez"
    depends_on:
      - api

  api:
    image: marquezproject/marquez:0.48.0
    container_name: marquez-api
    ports:
      - "5000:5000"
      - "5001:5001"
    volumes:
      - ./docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/api/v1/namespaces" ]
      interval: 200s
      timeout: 200s
      retries: 5
    links:
      - "db:postgres"
    depends_on:
      - db
    entrypoint: [ "./wait-for-it.sh", "db:5432", "--", "./entrypoint.sh" ]

  db:
    image: postgres:13
    container_name: marquez-db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "marquez"]
      interval: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      MARQUEZ_DB: marquez
      MARQUEZ_USER: marquez
      MARQUEZ_PASSWORD: marquez
      DATA_DB: data
      DATA_USER: data
      DATA_PASSWORD: data
    volumes:
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

volumes:
  kafka_data:
    driver: local
